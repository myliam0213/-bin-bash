#!/bin/bash

test_description="Basic Image Tests"

testdir="$(readlink -f $(dirname "${0}"))"
genimage="$(pwd)/genimage"

PATH="$PATH:/sbin:/usr/sbin"

set -- -v "$@"


. "${testdir}/sharness.sh"

filelist_orig="$(pwd)/file-list.orig"
filelist_test="$(pwd)/file-list.test"
root_orig="$(pwd)/root.orig"
root_test="$(pwd)/root.test"

setup_data() {
	umask 0022
	mkdir -p "${root_orig}"/{foo,bar,baz,"with spaces"}/{1,2,3}
	touch "${root_orig}"/{foo,bar,baz,"with spaces"}/{1,2,3}/{one,two}
	find "${root_orig}" -print0 | xargs -0 touch -c -d "2011-11-11 UTC"
	find "${root_orig}"/ -mindepth 1 -printf "%P\n" | sort  > "${filelist_orig}"

	cp "${testdir}"/*.conf* "${testdir}"/*.sh .
}

run_genimage_impl() {
	if [ "$verbose" = "t" ]; then
		vargs="--loglevel=3"
	fi
	rm -rf tmp images "${root_test}"
	mkdir "${root_test}" images
	if [ -n "${2}" ]; then
		# create a larger output image to make sure it is recreated properly
		dd if=/dev/zero of="images/${2}" bs=1M seek=30 count=1
	fi
	"${genimage}" \
		${vargs} \
		--outputpath=images \
		--inputpath=input \
		--rootpath="${root}" \
		--tmppath=tmp \
		${extra_opts} \
		--config "${1}"
}

run_genimage_root() {
	root="root.orig" run_genimage_impl "${@}"
}

run_genimage() {
	root="/this/directory/does/not/exist" run_genimage_impl "${@}"
}

func_check() {
	local ret="$?"
	set +x
	if [ "${ret}" != 0 ]; then
		echo "Failed to execute '${FUNCNAME[1]}'!" >&2
		return "${ret}"
	fi
}

check_filelist() {
	test_cmp "${filelist_orig}" "${filelist_test}"
}

check_root() {
	diff -ru "${root_orig}" "${root_test}"
}

get_size() {
	local file="${1}"
	if [ ! -f "${file}" ]; then
		echo "Failed to check file size: '${file}' does not exist!"
		return 1
	fi
	set -- $(du -b "${file}")
	size="${1}"
}

check_size_range() {
	local size
	get_size "${1}" || return
	if [ "${size}" -lt "${2}" -o "${size}" -gt "${3}" ]; then
		echo "Incorrect file size for '${1}': expected min: ${2} max: ${3} found: ${size}"
		return 1
	fi
}

check_size() {
	local size
	get_size "${1}" || return
	if [ "${size}" -ne "${2}" ]; then
		echo "Incorrect file size for '${1}': expected: ${2} found: ${size}"
		return 1
	fi
}

sfdisk_validate() {
	if [ -n "$(sfdisk -q -V "${1}" 2>&1 | grep -v unallocated)" ]; then
		echo "'sfdisk -V' failed with:"
		sfdisk -V "${1}" 2>&1
		return 1
	fi
}

get_disk_usage() {
	local file="${1}"
	if [ ! -f "${file}" ]; then
		echo "Failed to check file disk usage: '${file}' does not exist!"
		return 1
	fi
	set -- $(du -B 1 "${file}")
	usage="${1}"
}

check_disk_usage_range() {
        local usage
        get_disk_usage "${1}" || return
	if [ "${usage}" -lt "${2}" -o "${usage}" -gt "${3}" ]; then
		echo "Incorrect file disk usage for '${1}': expected min: ${2} max: ${3} found: ${usage}"
                return 1
        fi
}

exec_test_set_prereq() {
	command -v "${1}" > /dev/null && test_set_prereq "${1/./_}"
}

setup_data

set -o pipefail

exec_test_set_prereq cpio
test_expect_success cpio "cpio" "
	run_genimage_root cpio.config test.cpio &&
	zcat images/test.cpio | cpio --extract -t | grep -v '^\.$'  | sort > '${filelist_test}' &&
	check_size_range images/test.cpio 400 550 &&
	check_filelist
"

exec_test_set_prereq mkcramfs
test_expect_success mkcramfs "cramfs" "
	run_genimage_root cramfs.config test.cramfs &&
	check_size images/test.cramfs 4096
"

compare_label() {
	if [ "${1}" != "${2}" ]; then
		echo "Filesystem Label does not match: exprected: '${2}' found '${1}'"
		return 1
	fi
}

check_ext() {
	[ "$verbose" = "t" ] && set -x
	# UUID is randomly generated
	uuid="Filesystem UUID"
	# Hash Seed is randomly generated
	seed="Directory Hash Seed:"
	# checksum depends on random data
	csum1="Checksum: \|Group 0: (Blocks 1-4095) csum"
	# format change
	csum2="Group 0: (Blocks 1-4095) \\[ITABLE_ZEROED\\]\|  Checksum .*, unused inodes 205"
	dumpe2fs "${1}" | grep -v "^\($uuid\|$seed\|$csum1\|$csum2\)" > "dump" &&
	# some architectures (including arm64) use unsigned char
	sed -i 's/un\(signed_directory_hash\)/\1/' "dump" &&
	# fixup for ext3 journal size with old tune2fs
	sed -i 's/^\(Journal size:             \)1029k$/\11024k/' "dump" &&
	# output format changed with some version
	sed -i 's/^\(  Block bitmap at .*\),\( Inode bitmap.*\)$/\1\n \2/' "dump" &&
	# convert to latest dump2fs output
	sed -i  -e 's/^J\(ournal size:\)      /Total j\1/' \
		-e 's/^Journal length:      \( *\)\(.*\)$/Total journal blocks:\1\2\nMax transaction length:   \2\nFast commit length:       0/' \
		-e '/^Overhead clusters:/d' \
		"dump" &&
	if [ "${4}" = "genext2fs" ]; then
		if [ "$(genext2fs --version)" = "genext2fs 1.4.1" ]; then
			version=0
		else
			version=1
		fi
	else
		version=0
	fi
	test_cmp "${testdir}/${2}.${version}.dump" "dump" &&
	e2fsck -nf "${1}" &&
	# old versions of debugfs cannot dump '/'
	debugfs -R "ls -p" "${1}" | (
		IFS=/
		while read a b c d e x f; do
			case "${x}" in
			.|..|lost+found|"") continue ;;
			esac
			debugfs -R "rdump \"${x}\" \"${root_test}\"" "${1}" || break
		done
	) &&
	check_size "${1}" "${3}" &&
	check_root
	func_check
}

exec_test_set_prereq genext2fs
exec_test_set_prereq e2fsck
test_expect_success genext2fs,e2fsck "ext2" "
	run_genimage_root ext2.config test.ext2 &&
	check_ext images/test.ext2 ext2test 4194304 genext2fs
"

test_expect_success genext2fs,e2fsck "ext2percent" "
	run_genimage_root ext2percent.config test.ext2 &&
	check_ext images/test.ext2 ext2test-percent 69632 genext2fs
"

test_expect_success genext2fs,e2fsck "ext3" "
	run_genimage_root ext3.config test.ext3 &&
	check_ext images/test.ext3 ext3test 4194304 genext2fs
"

test_expect_success genext2fs,e2fsck "ext4" "
	run_genimage ext4.config test.ext4 &&
	check_ext images/test.ext4 ext4test 4194304 genext2fs
"

# make sure mke2fs supports '-d root-directory'
[ "$(mke2fs |& sed -n 's/.*\(-d \).*/\1/p')" = "-d " ] && test_set_prereq mke2fs
test_expect_success mke2fs,e2fsck "mke2fs" "
	run_genimage_root mke2fs.config mke2fs.ext4 &&
	check_ext images/mke2fs.ext4 mke2fs 33554432 mke2fs
"

setup_test_images() {
	rm -rf input &&
	mkdir input &&
	dd if=/dev/zero of=input/part1.img bs=512 count=7 &&
	dd if=/dev/zero of=input/part2.img bs=512 count=11 &&
	touch input/part3.img
}

exec_test_set_prereq dd
test_expect_success "flash" "
	setup_test_images &&
	run_genimage flash.config test.flash &&
	md5sum -c '${testdir}/flash.md5'
"

sanitized_fdisk_sfdisk() {
	# check the this identifier
	fdisk -l "${1}" | grep identifier: &&
	# check partitions; filter output to handle different sfdisk versions
	sfdisk -d "${1}" 2>/dev/null | grep '^images/' | \
		sed -e 's/  *//g' -e 's;Id=;type=;'
}

exec_test_set_prereq fdisk
exec_test_set_prereq sfdisk
test_expect_success fdisk,sfdisk "hdimage" "
	setup_test_images &&
	run_genimage hdimage.config test.hdimage &&
	check_size images/test.hdimage 10485760 &&
	sfdisk_validate images/test.hdimage &&
	check_disk_usage_range images/test.hdimage 40960 57344 &&
	sanitized_fdisk_sfdisk images/test.hdimage > hdimage.fdisk &&
	test_cmp '${testdir}/hdimage.fdisk' hdimage.fdisk &&
	check_size images/test.hdimage-2 11539968 &&
	sfdisk_validate images/test.hdimage-2 &&
	check_disk_usage_range images/test.hdimage-2 61290 65376 &&
	sanitized_fdisk_sfdisk images/test.hdimage-2 > hdimage.fdisk-2 &&
	test_cmp '${testdir}/hdimage.fdisk-2' hdimage.fdisk-2
"

test_expect_success "hdimage2" "
	setup_test_images &&
	test_must_fail run_genimage hdimage2.config test.hdimage
"

sfdisk -h | grep -q gpt && test_set_prereq sfdisk-gpt
fdisk -h | grep -q gpt && test_set_prereq fdisk-gpt
test_expect_success fdisk-gpt,sfdisk-gpt "hdimage4" "
	setup_test_images &&
	run_genimage hdimage4.config test.hdimage &&
	check_size images/test.hdimage 7360512 &&
	sfdisk_validate images/test.hdimage &&
	sanitized_fdisk_sfdisk images/test.hdimage > hdimage4.fdisk &&
	test_cmp '${testdir}/hdimage4.fdisk' hdimage4.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt "hdimage5" "
	setup_test_images &&
	run_genimage hdimage5.config test.hdimage &&
	check_size images/test.hdimage 7360512 &&
	sanitized_fdisk_sfdisk images/test.hdimage > hdimage5.fdisk &&
	test_cmp '${testdir}/hdimage5.fdisk' hdimage5.fdisk
"

test_expect_success fdisk,sfdisk "hdimage6" "
	setup_test_images &&
	run_genimage hdimage6.config test.hdimage &&
	check_size images/test.hdimage 28082176 &&
	sanitized_fdisk_sfdisk images/test.hdimage > hdimage6.fdisk &&
	test_cmp '${testdir}/hdimage6.fdisk' hdimage6.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt "hdimage7" "
	setup_test_images &&
	run_genimage hdimage7.config &&
	sfdisk_validate images/test.hdimage &&
	sanitized_fdisk_sfdisk images/test.hdimage > hdimage7.fdisk &&
	test_cmp '${testdir}/hdimage7.fdisk' hdimage7.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt "hdimage-hybrid" "
	setup_test_images &&
	run_genimage hdimage-hybrid.config &&
	sfdisk_validate images/hybrid.hdimage &&
	sanitized_fdisk_sfdisk images/hybrid.hdimage > hdimage-hybrid.fdisk &&
	test_cmp '${testdir}/hdimage-hybrid.fdisk' hdimage-hybrid.fdisk &&
	dd if=images/hybrid.hdimage count=1 | hexdump -C > hybrid.sector0 &&
	dd if=images/mbr.hdimage count=1 | hexdump -C > mbr.sector0 &&
	test_cmp hybrid.sector0 mbr.sector0
"

test_expect_success "hdimage syntax" "
	setup_test_images &&
	test_must_fail run_genimage hdimage-fail1.config &&
	test_must_fail run_genimage hdimage-fail2.config &&
	test_must_fail run_genimage hdimage-fail3.config &&
	test_must_fail run_genimage hdimage-fail4.config &&
	test_must_fail run_genimage hdimage-fail5.config &&
	test_must_fail run_genimage hdimage-fail6.config &&
	test_must_fail run_genimage hdimage-fail7.config
"

exec_test_set_prereq genisoimage
test_expect_success genisoimage "iso" "
	run_genimage_root iso.config test.iso &&
	check_size_range images/test.iso 300000 400000
"

exec_test_set_prereq mkfs.jffs2
test_expect_success mkfs_jffs2 "jffs2" "
	run_genimage_root jffs2.config test.jffs2 &&
	md5sum -c '${testdir}/jffs2.md5'
"

exec_test_set_prereq mkfs.f2fs
exec_test_set_prereq sload.f2fs
exec_test_set_prereq fsck.f2fs
test_expect_success mkfs_f2fs,sload_f2fs,fsck_f2fs "f2fs" "
	run_genimage_root f2fs.config test.f2fs &&
	fsck.f2fs images/test.f2fs
"

exec_test_set_prereq dd
exec_test_set_prereq diff
exec_test_set_prereq qemu-img
test_expect_success dd,diff,qemu-img "qemu" "
	setup_test_images &&
	run_genimage qemu.config test.qcow &&
	qemu-img check images/test.qcow &&
	zcat '${testdir}/qemu.qcow.gz' > qemu.qcow &&
	qemu-img compare images/test.qcow qemu.qcow
"

exec_test_set_prereq mksquashfs
test_expect_success mksquashfs "squashfs" "
	run_genimage_root squashfs.config test.squashfs &&
	check_size_range images/test.squashfs 4000 4100 &&
	unsquashfs -ls images/test.squashfs  | sed -n '/squashfs-root/s;squashfs-root/;;p' | sort > '${filelist_test}' &&
	check_filelist
"

exec_test_set_prereq tar
test_expect_success tar "tar" "
	run_genimage_root tar.config test.tar.gz &&
	check_size_range images/test.tar.gz 500 600 &&
	zcat images/test.tar.gz | tar -t | sed -n -e 's;/$;;' -e 's;^\./\(..*\)$;\1;p' | sort > '${filelist_test}' &&
	check_filelist
"

exec_test_set_prereq mkfs.ubifs
test_expect_success mkfs_ubifs "ubifs" "
	run_genimage_root ubifs.config test.ubifs &&
	check_size_range images/test.ubifs 200000 300000
"

setup_ubi_images() {
	rm -rf input &&
	mkdir input &&
	cp images/test.ubifs input/
}

exec_test_set_prereq ubinize
test_expect_success ubinize "ubi" "
	setup_ubi_images &&
	run_genimage ubi.config test.ubi &&
	check_size_range images/test.ubi 550000 600000
"

exec_test_set_prereq dd
exec_test_set_prereq mkdosfs
exec_test_set_prereq mcopy
test_expect_success dd,mkdosfs,mcopy "vfat" "
	run_genimage_root vfat.config test.vfat &&
	fsck.fat -p images/test.vfat | tee fsck.log &&
	test_must_fail grep -q 'Filesystem was changed' fsck.log &&
	check_size images/test.vfat 4193280 &&
	MTOOLS_SKIP_CHECK=1 mdir -/ -f -b -i images/test.vfat / | sed -e 's;^::/;;' -e 's;/$;;' | sort > '${filelist_test}' &&
	check_filelist
"

setup_fit_its() {
	setup_test_images &&
	cp ${testdir}/fit.its input/
}

exec_test_set_prereq mkimage
exec_test_set_prereq dtc
test_expect_success mkimage,dtc "fit" "
	setup_fit_its &&
	run_genimage fit.config test.fit
"

setup_rauc() {
	rm -rf input &&
	mkdir input &&
	cp -r "${testdir}"/rauc-openssl-ca input/ &&
	echo "test" > input/rauc.content &&
	echo "test2" > input/rauc2.content
}

exec_test_set_prereq rauc
test_expect_success rauc "rauc" "
	setup_rauc &&
	run_genimage rauc.config test.raucb &&
	rauc info \
		--keyring input/rauc-openssl-ca/ca.cert.pem \
		--cert input/rauc-openssl-ca/ca.cert.pem \
		images/test.raucb \
		| sed -e 's;O = Test Org, CN = ;/O=Test Org/CN=;' \
		      -e '/Bundle Format:[ \t]*plain$/d' \
		> test.raucb.info &&
	test_cmp '${testdir}/test.raucb.info' test.raucb.info &&
	rauc info \
		--keyring input/rauc-openssl-ca/ca.cert.pem \
		--cert input/rauc-openssl-ca/ca.cert.pem \
		images/test2.raucb \
		| sed -e 's;O = Test Org, CN = ;/O=Test Org/CN=;' \
		      -e '/Bundle Format:[ \t]*plain$/d' \
		> test2.raucb.info &&
	test_cmp '${testdir}/test2.raucb.info' test2.raucb.info
"

exec_test_set_prereq simg2img
test_expect_success simg2img "android-sparse" "
	setup_test_images &&
	for i in \`seq 16\`; do
		dd if=/dev/urandom of=input/interleaved conv=notrunc seek=\$[i*i] count=\$[i] bs=\$[i*i*512] || break
	done &&
	run_genimage sparse.config &&
	md5sum images/test.hdimage input/interleaved > md5sum &&
	rm images/test.hdimage input/interleaved &&
	check_size_range images/interleaved.sparse 9732464 9732608 &&
	simg2img images/test.sparse images/test.hdimage &&
	simg2img images/interleaved.sparse input/interleaved &&
	md5sum -c md5sum
"

setup_exec_files() {
	rm -rf input &&
	mkdir input &&
	dd if=/dev/zero of=input/file1.img bs=512 count=7 &&
	dd if=/dev/zero of=input/file2.img bs=512 count=7 &&
	dd if=/dev/zero of=input/file3.img bs=512 count=7 &&
	dd if=/dev/zero of=input/file4.img bs=512 count=7
}

test_expect_success "exec" "
	setup_exec_files &&
	run_genimage_root exec.config"

test_expect_success "exec-fail" "
	setup_exec_files &&
	test_must_fail run_genimage_root exec-fail.config"

setup_gpt_files() {
	rm -rf input &&
	mkdir input &&
	truncate -s 3k input/3K.img &&
	truncate -s 70k input/70K.img
}

test_expect_success "gpt-overlap1" "
	setup_gpt_files &&
	test_must_fail run_genimage gpt-overlap1.config"

test_expect_success "gpt-overlap2" "
	setup_gpt_files &&
	run_genimage gpt-overlap2.config"

test_expect_success "gpt-overlap3" "
	setup_gpt_files &&
	test_must_fail run_genimage gpt-overlap3.config"

# A bootloader image with a don't-care region extending over MBR
# table, GPT header and (usual) placement of GPT array.
test_expect_success "bootloader-hole1" "
	setup_gpt_files &&
	run_genimage hole.config"

# Oops, if we move the GPT array we're no longer covered by the hole.
test_expect_success "bootloader-hole2" "
	setup_gpt_files &&
	GPT_LOCATION=64K test_must_fail run_genimage hole.config"

# But it's ok if the array is moved beyond the bootloader.
test_expect_success "bootloader-hole3" "
	setup_gpt_files &&
	GPT_LOCATION=70K run_genimage hole.config"

# If the 70K bootloader starts at 64K, it will overlap a partition at 129K.
test_expect_success "bootloader-hole4" "
	setup_gpt_files &&
	OFFSET=64K test_must_fail run_genimage hole.config"

# But if it starts at 128K, its hole will cover the small 3K partition.
test_expect_success "bootloader-hole5" "
	setup_gpt_files &&
	OFFSET=128K run_genimage hole.config"


"$genimage" --help | grep -q 'GENIMAGE_INCLUDEPATH' && test_set_prereq "includepath"

test_expect_success fdisk-gpt,sfdisk-gpt "includepath1" "
	run_genimage include.config &&
	sanitized_fdisk_sfdisk images/include.hdimage > include.fdisk &&
	test_cmp '${testdir}/include-ccc.fdisk' include.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt,includepath "includepath2" "
	extra_opts='--includepath=${testdir}/include/aaa' run_genimage include.config &&
	sanitized_fdisk_sfdisk images/include.hdimage > include.fdisk &&
	test_cmp '${testdir}/include-aaa.fdisk' include.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt,includepath "includepath3" "
	extra_opts='--includepath=${testdir}/include/bbb:${testdir}/include/aaa' run_genimage include.config &&
	sanitized_fdisk_sfdisk images/include.hdimage > include.fdisk &&
	test_cmp '${testdir}/include-bbb.fdisk' include.fdisk
"

test_expect_success fdisk-gpt,sfdisk-gpt,includepath "includepath4" "
	extra_opts='--includepath=.:${testdir}/include/bbb' run_genimage include.config &&
	sanitized_fdisk_sfdisk images/include.hdimage > include.fdisk &&
	test_cmp '${testdir}/include-ccc.fdisk' include.fdisk
"

test_expect_success !includepath "includepath5" "
	extra_opts='--includepath=${testdir}/include/aaa' test_must_fail run_genimage include.config
"


test_done

# vim: syntax=sh
